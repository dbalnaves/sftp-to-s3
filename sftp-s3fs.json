{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "SFTP test server",
	"Parameters": {
		"InstanceType": {
			"Description": "EC2 instance type",
			"Type": "String",
			"Default": "t2.nano",
			"AllowedValues": ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large"],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"KeyName": {
			"Description": "The EC2 Key Pair to allow SSH access to the instances",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Default": "DATA-PROD",
			"ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
		},
		"VPC": {
			"Description": "Select the VPC to launch the SFTP Instance into",
			"Type": "AWS::EC2::VPC::Id",
			"Default": "vpc-116f9479"
		},
		"Subnet1": {
			"Description": "A subnet for the SFTP Instance - ap-southeast-2b",
			"Type": "String",
			"Default": "subnet-83fcd7f7",
			"ConstraintDescription": "Must be a subnet within the VPC selected."
		},
		"S3FSIncomingBucket": {
			"Description": "The name of the bucket for users to upload files",
			"Type": "String",
			"Default": "data-test-incoming"
		},
		"S3FSOutboundBucket": {
			"Description": "The name of the buckets for users to download files",
			"Type": "String",
			"Default": "data-test-outbound"
		},
		"SettingsBucket": {
			"Description": "Name of bucket storing user configuration",
			"Type": "String",
			"Default": "data-ops-settings"
		}
	},
	"Mappings": {
		"AWSInstanceType2Arch": {
			"t2.nano": {
				"Arch": "HVM64"
			},
			"t2.micro": {
				"Arch": "HVM64"
			},
			"t2.small": {
				"Arch": "HVM64"
			},
			"t2.medium": {
				"Arch": "HVM64"
			},
			"t2.large": {
				"Arch": "HVM64"
			}
		},
		"AWSInstanceType2NATArch": {
			"t2.nano": {
				"Arch": "NATHVM64"
			},
			"t2.micro": {
				"Arch": "NATHVM64"
			},
			"t2.small": {
				"Arch": "NATHVM64"
			},
			"t2.medium": {
				"Arch": "NATHVM64"
			},
			"t2.large": {
				"Arch": "NATHVM64"
			}
		},
		"AWSRegionArch2AMI": {
			"ap-southeast-2": {
				"PV64": "ami-63351d00",
				"HVM64": "ami-dc361ebf",
				"HVMG2": "ami-0c95b86f"
			}
		}
	},
	"Resources": {
		"HostSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable SSH access to the SFTP host from the Internet via port 22",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"HostRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": {
						"Effect": "Allow",
						"Principal": {
							"Service": "ec2.amazonaws.com"
						},
						"Action": "sts:AssumeRole"
					}
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "DATA-OPS-SFTP-policy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": "sts:AssumeRole",
							"Resource": "*"
						}, {
							"Effect": "Allow",
							"Action": "s3:GetObject",
							"Resource": {
								"Fn::Join": ["", [
									"arn:aws:s3:::", {
										"Ref": "SettingsBucket"
									},
									"/", {
										"Ref": "AWS::StackName"
									}, "/users/*"
								]]
							}
						}, {
							"Effect": "Allow",
							"Action": "s3:ListBucket",
							"Resource": {
								"Fn::Join": ["", [
									"arn:aws:s3:::", {
										"Ref": "SettingsBucket"
									}
								]]
							},
							"Condition": {
								"StringEquals": {
									"s3:prefix": {
										"Fn::Join": ["", [{
												"Ref": "AWS::StackName"
											},
											"/users/*"
										]]
									}
								}
							}
						}, {
							"Effect": "Allow",
							"Action": [
								"s3:GetBucketLocation",
								"s3:PutObject",
								"s3:DeleteObject",
								"s3:GetObject",
								"s3:ListBucket"
							],
							"Resource": [{
								"Fn::Join": ["", [
									"arn:aws:s3:::", {
										"Ref": "S3FSIncomingBucket"
									}
								]]
							}, {
								"Fn::Join": ["", [
									"arn:aws:s3:::", {
										"Ref": "S3FSIncomingBucket"
									},
									"/*"
								]]
							}]
						}, {
							"Effect": "Allow",
							"Action": [
								"s3:GetBucketLocation",
								"s3:PutObject",
								"s3:GetObject",
								"s3:ListBucket"
							],
							"Resource": [{
								"Fn::Join": ["", [
									"arn:aws:s3:::", {
										"Ref": "S3FSOutboundBucket"
									}
								]]
							}, {
								"Fn::Join": ["", [
									"arn:aws:s3:::", {
										"Ref": "S3FSOutboundBucket"
									},
									"/*"
								]]
							}]
						}, {
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents",
								"logs:DescribeLogStreams"
							],
							"Resource": [
								"arn:aws:logs:*:*:*"
							]
						}]
					}

				}]
			}
		},
		"HostProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [{
					"Ref": "HostRole"
				}],
				"Path": "/"
			}
		},
		"ASG": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"LaunchConfigurationName": {
					"Ref": "LaunchConfig"
				},
				"VPCZoneIdentifier": [{
					"Ref": "Subnet1"
				}],
				"MinSize": "1",
				"MaxSize": "1",
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Ref": "AWS::StackName"
					},
					"PropagateAtLaunch": "true"
				}, {
					"Key": "Platform",
					"Value": "DATA",
					"PropagateAtLaunch": "true"
				}, {
					"Key": "Cost Centre",
					"Value": "6624",
					"PropagateAtLaunch": "true"
				}]
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT5M",
					"Count": "1"
				}
			}
		},
		"LaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"packages": {
							"yum": {
								"libcurl-devel": [],
								"gcc": [],
								"libstdc++-devel": [],
								"gcc-c++": [],
								"fuse": [],
								"fuse-devel": [],
								"libxml2-devel": [],
								"mailcap": [],
								"automake": [],
								"openssl-devel": [],
								"git": []
							}
						},
						"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["", [
										"[main]\n",
										"stack=", {
											"Ref": "AWS::StackId"
										}, "\n",
										"region=", {
											"Ref": "AWS::Region"
										}, "\n"
									]]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cron.d/process_users": {
								"content": {
									"Fn::Join": ["", [
									    "SHELL=/bin/bash\n",
										"PATH=/sbin:/bin:/usr/sbin:/usr/bin\n",
										"\n",
										"* * * * * root /usr/local/bin/process_users.sh > /dev/null 2>&1\n"
									]]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/usr/local/bin/install-s3fs.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash\n",
										"cd /usr/local/src/\n",
										"git clone https://github.com/s3fs-fuse/s3fs-fuse\n",
										"cd s3fs-fuse/\n",
										"./autogen.sh\n",
										"./configure --prefix=/usr --with-openssl\n",
										"make\n",
										"sudo make install\n"
									]]
								},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},
							"/usr/local/bin/configure_mounts.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash\n",
										"for name in ", {
											"Ref": "S3FSIncomingBucket"
										}, " ", {
											"Ref": "S3FSOutboundBucket"
										}, "\n",
										"do mkdir /mnt/$name\n",
										"echo -e \"s3fs#$name\\t/mnt/$name\\tfuse\tallow_other,iam_role\\t0\\t0\" >> /etc/fstab\n",
										"mount /mnt/$name\n",
										"done"
									]]
								},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},
							"/usr/local/bin/configure_ssh-sftp.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash\n",
										"SettingsBucket=\"", {
											"Ref": "SettingsBucket"
										}, "\"\n",
										"StackName=\"", {
											"Ref": "AWS::StackName"
										}, "\"\n",
										"mkdir /etc/ssh-pool/\n",
										"ln -s /home/ec2-user/.ssh/authorized_keys /etc/ssh-pool/ec2-user.pub\n",
										"sed -i 's#AuthorizedKeysFile .ssh/authorized_keys#AuthorizedKeysFile /etc/ssh-pool/%u.pub#' /etc/ssh/sshd_config\n",
										"sed -i 's#Subsystem sftp.*#Subsystem       sftp    internal-sftp -l INFO#' /etc/ssh/sshd_config\n",
										"sed -i 's#PasswordAuthentication no#PasswordAuthentication yes#' /etc/ssh/sshd_config\n",
										"sed -i 's#HostKey /etc/ssh/ssh_host_ecdsa_key#\\#HostKey /etc/ssh/ssh_host_ecdsa_key#' /etc/ssh/sshd_config\n",
										"sed -i 's#HostKey /etc/ssh/ssh_host_ed25519_key#\\#HostKey /etc/ssh/ssh_host_ed25519_key#' /etc/ssh/sshd_config\n",
										"sed -i 's#\\#HostKey /etc/ssh/ssh_host_key#HostKey /etc/ssh/ssh_host_key#' /etc/ssh/sshd_config\n",
										"sed -i 's#\\#HostKey /etc/ssh/ssh_host_dsa_key#HostKey /etc/ssh/ssh_host_dsa_key#' /etc/ssh/sshd_config\n",
										"cat << EOF >> /etc/ssh/sshd_config\n",
										"\n",
										"\n",
										"Match Group sftpusers\n",
										"        ChrootDirectory /sftp/%u\n",
										"        ForceCommand internal-sftp -f AUTHPRIV -l INFO\n",
										"EOF",
										"\n",
										"rm /etc/ssh/ssh_host_*\n",
										"eval $(aws --output text sts assume-role --role-arn arn:aws:sts::846880483810:role/DATA-GET-SETTINGS --role-session-name data-test-ops-sftp | tail -n 1 | awk '{ print \" export AWS_ACCESS_KEY_ID=\"$2\" export AWS_SECRET_ACCESS_KEY=\"$4\" export AWS_SESSION_TOKEN=\"$5 }')\n",
										"aws s3 cp s3://$SettingsBucket/$StackName/ /etc/ssh --recursive --exclude '*' --include 'ssh_host_*'\n",
										"chmod 600 /etc/ssh/ssh_host_*\n",
										"/etc/init.d/sshd restart\n"
									]]
								},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},
							"/etc/sftp-server-logs.conf": {
								"content": {
									"Fn::Join": ["", [
										"[general]\n",
										"state_file = /var/awslogs/state/agent-state\n",
										"\n",
										"[/var/log/messages]\n",
										"file = /var/log/messages\n",
										"log_group_name = ", {
											"Ref": "AWS::StackName"
										},
										"\n",
										"log_stream_name = messages\n",
										"datetime_format = %b %d %H:%M:%S\n",
										"\n",
										"[/var/log/secure]\n",
										"file = /var/log/secure\n",
										"log_group_name = ", {
											"Ref": "AWS::StackName"
										},
										"\n",
										"log_stream_name = secure\n",
										"datetime_format = %b %d %H:%M:%S\n"
									]]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/usr/local/bin/process_users.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash\n",
										"\n",
										"if [ -e /tmp/process_users.lock ] && ps -o pid= -o comm= $(cat /tmp/process_users.lock) > /dev/null ; then\n",
										"    exit 0\n",
										"fi\n",
										"echo $$ > /tmp/process_users.lock\n",
										"S3FSIncomingBucket=\"", {
											"Ref": "S3FSIncomingBucket"
										}, "\"\n",
										"S3FSOutboundBucket=\"", {
											"Ref": "S3FSOutboundBucket"
										}, "\"\n",
										"SettingsBucket=\"", {
											"Ref": "SettingsBucket"
										}, "\"\n",
										"StackName=\"", {
											"Ref": "AWS::StackName"
										}, "\"\n",
										"\n",
										"if [ \"$USER\" != \"root\" ] ; then\n",
										"    echo \"Must be run as root\"\n",
										"    exit 0\n",
										"fi\n",
										"\n",
										"if ! mount | grep -q /mnt/$S3FSIncomingBucket ; then\n",
										"    exit 0\n",
										"fi\n",
										"\n",
										"if ! mount | grep -q /mnt/$S3FSOutboundBucket ; then\n",
										"    exit 0\n",
										"fi\n",
										"\n",
										"if [ ! -f /etc/passwd.orig ] ; then\n",
										"    cp /etc/passwd /etc/passwd.orig\n",
										"    logger -p authpriv.notice \"$0 Backing up origional passwd file to /etc/passwd.orig\"\n",
										"fi\n",
										"\n",
										"if [ ! -d /sftp ] ; then\n",
										"    mkdir /sftp\n",
										"    logger -p authpriv.notice \"$0 Creating directory /sftp\"\n",
										"fi\n",
										"\n",
										"if ! grep -q ^sftpusers: /etc/group ; then\n",
										"    groupadd sftpusers\n",
										"fi\n",
										"\n",
										"eval $(aws --output text sts assume-role --role-arn arn:aws:sts::846880483810:role/DATA-GET-SETTINGS --role-session-name data-test-ops-sftp | tail -n 1 | awk '{ print \" export AWS_ACCESS_KEY_ID=\"$2\" export AWS_SECRET_ACCESS_KEY=\"$4\" export AWS_SESSION_TOKEN=\"$5 }')\n",
										"\n",
										"files=$(echo -n $(aws s3 ls $SettingsBucket/$StackName/users/ | awk '{ print $4 }' | grep .))\n",
										"\n",
										"for name in $files ; do\n",
										"       user_list=$(echo -n \"$name $user_list\")\n",
										"       if ! grep -q ^$name: /etc/passwd ; then\n",
										"               user_config=$(echo $(aws s3 cp s3://$SettingsBucket/$StackName/users/$name - | head -n 1 ) | sed -e 's#^\\([[:graph:]]*\\).*$#\\1#' ) \n",
										"               passwd=$(echo $user_config | cut -f1 -d:)\n",
										"               S3incoming=$(echo $user_config | cut -f2 -d: | sed -e 's#/$##')\n",
										"               S3outbound=$(echo $user_config | cut -f3 -d: | sed -e 's#/$##')\n",
										"               adduser $name -d /incoming -N -M -s /sbin/nologin -g sftpusers\n",
										"               mkdir -p /sftp/$name/dev\n",
										"               echo \"\\$AddUnixListenSocket /sftp/$name/dev/log\" > /etc/rsyslog.d/$name.conf\n",
										"               service rsyslog restart\n",
										"               if ! echo $user_config | egrep -q -E ^[^:]*:[-_0-9a-zA-Z/]*:[-_0-9a-zA-Z/]*$ ; then\n",
										"                       logger -p authpriv.notice \"$0 Invalid configuration for user $name\"\n",
										"               else\n",
										"            logger -p authpriv.notice \"$0 Creating user $name\"\n",
										"            echo \"$name:$passwd\" | chpasswd\n",
										"            uid=$(cat /etc/passwd | grep $name | cut -f3 -d:)\n",
										"            gid=$(cat /etc/passwd | grep $name | cut -f4 -d:)\n",
										"            if echo $S3FSIncomingBucket | grep -q $(echo $S3incoming | cut -d/ -f1) ; then\n",
										"                mkdir -p /mnt/$S3incoming /sftp/$name/incoming\n",
										"                chown $name: /sftp/$name/incoming\n",
										"                mount /mnt/$S3incoming /sftp/$name/incoming -o bind\n",
										"            else\n",
										"                logger -p authpriv.notice \"$0 User $name has incoming bucket path $S3incoming that does not match S3FS bucket $S3FSIncomingBucket\"\n",
										"            fi\n",
										"            if echo $S3FSOutboundBucket | grep -q $(echo $S3outbound | cut -d/ -f1) ; then\n",
										"                mkdir -p /mnt/$S3outbound /sftp/$name/outbound\n",
										"                chown $name: /sftp/$name/incoming /sftp/$name/outbound\n",
										"                mount /mnt/$S3outbound /sftp/$name/outbound -o bind\n",
										"            else\n",
										"                logger -p authpriv.notice \"$0 User $name has outbound bucket path $S3outbound that does not match S3FS bucket $S3FSOutboundBucket\"\n",
										"            fi\n",
										"        fi\n",
										"    fi\n",
										"done\n",
										"users_to_delete=$((cat /etc/passwd.orig /etc/passwd | cut -f1 -d: ; echo $user_list ) | xargs -n1 echo | grep . | sort | uniq -u)\n",
										"for name in $users_to_delete; do\n",
										"    if grep -q ^$name: /etc/passwd ; then\n",
										"        logger -p authpriv.notice \"$0 Removing user $name\"\n",
										"        userdel $name\n",
										"        umount /sftp/$name/incoming\n",
										"        umount /sftp/$name/outbound\n",
										"        rmdir /sftp/$name/incoming /sftp/$name/outbound\n",
										"        rm /etc/rsyslog.d/$name.conf",
										"        service rsyslog reload\n",
										"        rmdir /sftp/$name/dev\n",
										"        rmdir /sftp/$name\n",
										"    fi\n",
										"done\n",
										"rm /tmp/process_users.lock\n",
										"exit 0\n",
										"\n"
									]]
								},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": ["", [
										"[cfn-auto-reloader-hook]\n",
										"triggers=post.update\n",
										"path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
										"action=/opt/aws/bin/cfn-init -v ",
										"         --stack ", {
											"Ref": "AWS::StackName"
										},
										"         --resource LaunchConfig ",
										"         --region ", {
											"Ref": "AWS::Region"
										}, "\n",
										"runas=root\n"
									]]
								}
							}
						},
						"commands": {
							"s3fs-fuse": {
								"command": "/usr/local/bin/install-s3fs.sh"
							},
							"s3fs-mounts": {
								"command": "/usr/local/bin/configure_mounts.sh"
							},
							"sshd-sftp": {
								"command": "/usr/local/bin/configure_ssh-sftp.sh"
							},
							"awslogs": {
								"command": {
									"Fn::Join": ["", [
										"wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py",
										" -O /usr/local/bin/awslogs-agent-setup.py\n",
										"chmod +x /usr/local/bin/awslogs-agent-setup.py\n",
										"/usr/local/bin/awslogs-agent-setup.py -n",
										" -r ", {
											"Ref": "AWS::Region"
										},
										" -c /etc/sftp-server-logs.conf\n",
										"service awslogs start\n"
									]]
								}
							}

						},
						"services": {
							"sysvinit": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"IamInstanceProfile": {
					"Ref": "HostProfile"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"ImageId": {
					"Fn::FindInMap": ["AWSRegionArch2AMI", {
						"Ref": "AWS::Region"
					}, {
						"Fn::FindInMap": ["AWSInstanceType2Arch", {
							"Ref": "InstanceType"
						}, "Arch"]
					}]
				},
				"SecurityGroups": [{
					"Ref": "HostSecurityGroup"
				}],
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash -xe\n",
							"/opt/aws/bin/cfn-init -v ",
							"         --stack ", {
								"Ref": "AWS::StackName"
							},
							"         --resource LaunchConfig ",
							"         --region ", {
								"Ref": "AWS::Region"
							}, "\n",
							"/opt/aws/bin/cfn-signal -e $? ",
							"         --stack ", {
								"Ref": "AWS::StackName"
							},
							"         --resource ASG ",
							"         --region ", {
								"Ref": "AWS::Region"
							}, "\n"
						]]
					}
				}
			}
		}
	},
	"Outputs": {
		"SettingsBucketName": {
			"Description": "Name of the settings bucket",
			"Value": {
				"Ref": "SettingsBucket"
			}
		},
		"S3FSIncomingBucket": {
			"Description": "Name of the Incoming bucket",
			"Value": {
				"Ref": "S3FSIncomingBucket"
			}
		},
		"S3FSOutboundBucket": {
			"Description": "Name of the Outbound bucket",
			"Value": {
				"Ref": "S3FSOutboundBucket"
			}
		}
	}
}
